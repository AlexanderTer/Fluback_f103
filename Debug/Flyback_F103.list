
Flyback_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005f8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000728  08000728  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000728  08000728  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000728  08000728  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000728  08000728  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000728  08000728  00010728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800072c  0800072c  0001072c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000734  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000734  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006ff  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000285  00000000  00000000  0002072c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  000209b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000060  00000000  00000000  00020a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010168  00000000  00000000  00020ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000013c8  00000000  00000000  00030c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054421  00000000  00000000  00031ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00086411  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001fc  00000000  00000000  00086464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000710 	.word	0x08000710

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000710 	.word	0x08000710

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__gesf2>:
 800038c:	f04f 3cff 	mov.w	ip, #4294967295
 8000390:	e006      	b.n	80003a0 <__cmpsf2+0x4>
 8000392:	bf00      	nop

08000394 <__lesf2>:
 8000394:	f04f 0c01 	mov.w	ip, #1
 8000398:	e002      	b.n	80003a0 <__cmpsf2+0x4>
 800039a:	bf00      	nop

0800039c <__cmpsf2>:
 800039c:	f04f 0c01 	mov.w	ip, #1
 80003a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80003a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80003a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b0:	bf18      	it	ne
 80003b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b6:	d011      	beq.n	80003dc <__cmpsf2+0x40>
 80003b8:	b001      	add	sp, #4
 80003ba:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80003be:	bf18      	it	ne
 80003c0:	ea90 0f01 	teqne	r0, r1
 80003c4:	bf58      	it	pl
 80003c6:	ebb2 0003 	subspl.w	r0, r2, r3
 80003ca:	bf88      	it	hi
 80003cc:	17c8      	asrhi	r0, r1, #31
 80003ce:	bf38      	it	cc
 80003d0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80003d4:	bf18      	it	ne
 80003d6:	f040 0001 	orrne.w	r0, r0, #1
 80003da:	4770      	bx	lr
 80003dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003e0:	d102      	bne.n	80003e8 <__cmpsf2+0x4c>
 80003e2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80003e6:	d105      	bne.n	80003f4 <__cmpsf2+0x58>
 80003e8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80003ec:	d1e4      	bne.n	80003b8 <__cmpsf2+0x1c>
 80003ee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80003f2:	d0e1      	beq.n	80003b8 <__cmpsf2+0x1c>
 80003f4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop

080003fc <__aeabi_cfrcmple>:
 80003fc:	4684      	mov	ip, r0
 80003fe:	4608      	mov	r0, r1
 8000400:	4661      	mov	r1, ip
 8000402:	e7ff      	b.n	8000404 <__aeabi_cfcmpeq>

08000404 <__aeabi_cfcmpeq>:
 8000404:	b50f      	push	{r0, r1, r2, r3, lr}
 8000406:	f7ff ffc9 	bl	800039c <__cmpsf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	bf48      	it	mi
 800040e:	f110 0f00 	cmnmi.w	r0, #0
 8000412:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000414 <__aeabi_fcmpeq>:
 8000414:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000418:	f7ff fff4 	bl	8000404 <__aeabi_cfcmpeq>
 800041c:	bf0c      	ite	eq
 800041e:	2001      	moveq	r0, #1
 8000420:	2000      	movne	r0, #0
 8000422:	f85d fb08 	ldr.w	pc, [sp], #8
 8000426:	bf00      	nop

08000428 <__aeabi_fcmplt>:
 8000428:	f84d ed08 	str.w	lr, [sp, #-8]!
 800042c:	f7ff ffea 	bl	8000404 <__aeabi_cfcmpeq>
 8000430:	bf34      	ite	cc
 8000432:	2001      	movcc	r0, #1
 8000434:	2000      	movcs	r0, #0
 8000436:	f85d fb08 	ldr.w	pc, [sp], #8
 800043a:	bf00      	nop

0800043c <__aeabi_fcmple>:
 800043c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000440:	f7ff ffe0 	bl	8000404 <__aeabi_cfcmpeq>
 8000444:	bf94      	ite	ls
 8000446:	2001      	movls	r0, #1
 8000448:	2000      	movhi	r0, #0
 800044a:	f85d fb08 	ldr.w	pc, [sp], #8
 800044e:	bf00      	nop

08000450 <__aeabi_fcmpge>:
 8000450:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000454:	f7ff ffd2 	bl	80003fc <__aeabi_cfrcmple>
 8000458:	bf94      	ite	ls
 800045a:	2001      	movls	r0, #1
 800045c:	2000      	movhi	r0, #0
 800045e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000462:	bf00      	nop

08000464 <__aeabi_fcmpgt>:
 8000464:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000468:	f7ff ffc8 	bl	80003fc <__aeabi_cfrcmple>
 800046c:	bf34      	ite	cc
 800046e:	2001      	movcc	r0, #1
 8000470:	2000      	movcs	r0, #0
 8000472:	f85d fb08 	ldr.w	pc, [sp], #8
 8000476:	bf00      	nop

08000478 <main>:
float a = 3.f;



int main(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	rcc_init();
 800047c:	f000 f842 	bl	8000504 <rcc_init>
	gpio_init();
 8000480:	f000 f820 	bl	80004c4 <gpio_init>
	timer_init();
 8000484:	f000 f8ba 	bl	80005fc <timer_init>

	while (1)
	{
		a++;
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <main+0x44>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff fe73 	bl	800017c <__addsf3>
 8000496:	4603      	mov	r3, r0
 8000498:	461a      	mov	r2, r3
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <main+0x44>)
 800049c:	601a      	str	r2, [r3, #0]
		if (a == 10)
 800049e:	4b07      	ldr	r3, [pc, #28]	; (80004bc <main+0x44>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4907      	ldr	r1, [pc, #28]	; (80004c0 <main+0x48>)
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff ffb5 	bl	8000414 <__aeabi_fcmpeq>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d003      	beq.n	80004b8 <main+0x40>
			a = 0;
 80004b0:	4b02      	ldr	r3, [pc, #8]	; (80004bc <main+0x44>)
 80004b2:	f04f 0200 	mov.w	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
		a++;
 80004b8:	e7e6      	b.n	8000488 <main+0x10>
 80004ba:	bf00      	nop
 80004bc:	20000000 	.word	0x20000000
 80004c0:	41200000 	.word	0x41200000

080004c4 <gpio_init>:
#include <stm32f1xx.h>
#include <stdint.h>
#include "gpio.h"

void gpio_init(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	// Включаем тактовый сигнал порта GPIOA.
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <gpio_init+0x38>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <gpio_init+0x38>)
 80004ce:	f043 0304 	orr.w	r3, r3, #4
 80004d2:	6193      	str	r3, [r2, #24]

	// Режим порта - reserved, альтернативная функция - PushPull
	GPIOA->CRH |=  GPIO_CRH_MODE8  | GPIO_CRH_CNF8_1;
 80004d4:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <gpio_init+0x3c>)
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	4a09      	ldr	r2, [pc, #36]	; (8000500 <gpio_init+0x3c>)
 80004da:	f043 030b 	orr.w	r3, r3, #11
 80004de:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~(GPIO_CRH_CNF8_0);
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <gpio_init+0x3c>)
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <gpio_init+0x3c>)
 80004e6:	f023 0304 	bic.w	r3, r3, #4
 80004ea:	6053      	str	r3, [r2, #4]

	// Очистить регистр данных
	GPIOA->ODR = 0x0000;
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <gpio_init+0x3c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010800 	.word	0x40010800

08000504 <rcc_init>:
#include <stdint.h>
#include "rcc.h"
#include <system_stm32f1xx.h>

void rcc_init(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
	//SystemInit();

	// Сбросить тактирование всех шин
	RCC->AHBENR = 0xFFFFFFFF;
 8000508:	4b3a      	ldr	r3, [pc, #232]	; (80005f4 <rcc_init+0xf0>)
 800050a:	f04f 32ff 	mov.w	r2, #4294967295
 800050e:	615a      	str	r2, [r3, #20]
	RCC->AHBENR = 0x00000000;
 8000510:	4b38      	ldr	r3, [pc, #224]	; (80005f4 <rcc_init+0xf0>)
 8000512:	2200      	movs	r2, #0
 8000514:	615a      	str	r2, [r3, #20]

	RCC->APB1RSTR = 0xFFFFFFFF;
 8000516:	4b37      	ldr	r3, [pc, #220]	; (80005f4 <rcc_init+0xf0>)
 8000518:	f04f 32ff 	mov.w	r2, #4294967295
 800051c:	611a      	str	r2, [r3, #16]
	RCC->APB1RSTR = 0x00000000;
 800051e:	4b35      	ldr	r3, [pc, #212]	; (80005f4 <rcc_init+0xf0>)
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]

	RCC->APB2RSTR = 0xFFFFFFFF;
 8000524:	4b33      	ldr	r3, [pc, #204]	; (80005f4 <rcc_init+0xf0>)
 8000526:	f04f 32ff 	mov.w	r2, #4294967295
 800052a:	60da      	str	r2, [r3, #12]
	RCC->APB2RSTR = 0x00000000;
 800052c:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <rcc_init+0xf0>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]

	// Обновление переменной с частотой тактирования
	//SystemCoreClockUpdate();

	// Включение питания RCC
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000532:	4b30      	ldr	r3, [pc, #192]	; (80005f4 <rcc_init+0xf0>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	4a2f      	ldr	r2, [pc, #188]	; (80005f4 <rcc_init+0xf0>)
 8000538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053c:	61d3      	str	r3, [r2, #28]

	// Запуск от HSE
	RCC->CR |= RCC_CR_HSEON;
 800053e:	4b2d      	ldr	r3, [pc, #180]	; (80005f4 <rcc_init+0xf0>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a2c      	ldr	r2, [pc, #176]	; (80005f4 <rcc_init+0xf0>)
 8000544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000548:	6013      	str	r3, [r2, #0]

	// Ожидание включеия внешнего генератора
	while (!(RCC->CR & RCC_CR_HSERDY))
 800054a:	bf00      	nop
 800054c:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <rcc_init+0xf0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000554:	2b00      	cmp	r3, #0
 8000556:	d0f9      	beq.n	800054c <rcc_init+0x48>
		;

	RCC->CR |= RCC_CR_HSEBYP; // HSE crystal oscillator  bypassed
 8000558:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <rcc_init+0xf0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a25      	ldr	r2, [pc, #148]	; (80005f4 <rcc_init+0xf0>)
 800055e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000562:	6013      	str	r3, [r2, #0]

	// Выключение PLL
	RCC->CR &= ~RCC_CR_PLLON;
 8000564:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <rcc_init+0xf0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a22      	ldr	r2, [pc, #136]	; (80005f4 <rcc_init+0xf0>)
 800056a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800056e:	6013      	str	r3, [r2, #0]
	while (RCC->CR & RCC_CR_PLLRDY)
 8000570:	bf00      	nop
 8000572:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <rcc_init+0xf0>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1f9      	bne.n	8000572 <rcc_init+0x6e>
		;
	// Сигнал HSE делится на 2 - 16 / 2 = 8 MHz
	RCC->CFGR |= RCC_CFGR_PLLXTPRE;
 800057e:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <rcc_init+0xf0>)
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <rcc_init+0xf0>)
 8000584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000588:	6053      	str	r3, [r2, #4]

	// Настройка умножителя на 9 : 8 * 9 = 72 MHz
	RCC->CFGR |= RCC_CFGR_PLLMULL9;
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <rcc_init+0xf0>)
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	4a19      	ldr	r2, [pc, #100]	; (80005f4 <rcc_init+0xf0>)
 8000590:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000594:	6053      	str	r3, [r2, #4]

	// Выбор HSE как источника для PLL
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <rcc_init+0xf0>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	4a16      	ldr	r2, [pc, #88]	; (80005f4 <rcc_init+0xf0>)
 800059c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005a0:	6053      	str	r3, [r2, #4]

	// Делитель для шины APB1 на 2 -  частота 36 MHz
	RCC->CFGR |= RCC_CFGR_PPRE1_2;
 80005a2:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <rcc_init+0xf0>)
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <rcc_init+0xf0>)
 80005a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ac:	6053      	str	r3, [r2, #4]

	// Делитель АЦП на 6 - частота 12 MHZ
	RCC->CFGR |= RCC_CFGR_ADCPRE_1;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <rcc_init+0xf0>)
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <rcc_init+0xf0>)
 80005b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005b8:	6053      	str	r3, [r2, #4]

	// Настройка latancy на 2 для 72 МГц
	FLASH->ACR |= FLASH_ACR_LATENCY_2;
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <rcc_init+0xf4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <rcc_init+0xf4>)
 80005c0:	f043 0304 	orr.w	r3, r3, #4
 80005c4:	6013      	str	r3, [r2, #0]

	RCC->CR |= RCC_CR_PLLON;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <rcc_init+0xf0>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <rcc_init+0xf0>)
 80005cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005d0:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY))
 80005d2:	bf00      	nop
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <rcc_init+0xf0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d0f9      	beq.n	80005d4 <rcc_init+0xd0>
		;
	// Выбор PLL как основного источника тактирования
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <rcc_init+0xf0>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	4a03      	ldr	r2, [pc, #12]	; (80005f4 <rcc_init+0xf0>)
 80005e6:	f043 0302 	orr.w	r3, r3, #2
 80005ea:	6053      	str	r3, [r2, #4]

	//SystemCoreClockUpdate();
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40022000 	.word	0x40022000

080005fc <timer_init>:

/**
 * Инициализация таймера 1 в режиме ЧИМ
 */
void timer_init(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

	// Включаем тактирование таймера TIM1.
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000600:	4b1a      	ldr	r3, [pc, #104]	; (800066c <timer_init+0x70>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a19      	ldr	r2, [pc, #100]	; (800066c <timer_init+0x70>)
 8000606:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800060a:	6193      	str	r3, [r2, #24]

	// Включение автоперезагрузки.
	TIM1->CR1 |= TIM_CR1_ARPE;
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <timer_init+0x74>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a17      	ldr	r2, [pc, #92]	; (8000670 <timer_init+0x74>)
 8000612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000616:	6013      	str	r3, [r2, #0]

	// Предделитель счётчика 1
	TIM1->PSC = 0;
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <timer_init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	629a      	str	r2, [r3, #40]	; 0x28

	// Врехний предел счёта
	TIM1->ARR = 65535;
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <timer_init+0x74>)
 8000620:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000624:	62da      	str	r2, [r3, #44]	; 0x2c

	// Регистр сравнения канала 1 на половину периода
	TIM1->CCR1 = 30000;
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <timer_init+0x74>)
 8000628:	f247 5230 	movw	r2, #30000	; 0x7530
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 100;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <timer_init+0x74>)
 8000630:	2264      	movs	r2, #100	; 0x64
 8000632:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0x00;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <timer_init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 0x00;
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <timer_init+0x74>)
 800063c:	2200      	movs	r2, #0
 800063e:	641a      	str	r2, [r3, #64]	; 0x40

	TIM1->CCMR1 = (TIM_CCMR1_OC1PE | TIM_CCMR1_OC1M |
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <timer_init+0x74>)
 8000642:	f647 0278 	movw	r2, #30840	; 0x7878
 8000646:	619a      	str	r2, [r3, #24]
	TIM_CCMR1_OC2PE | TIM_CCMR1_OC2M);

	TIM1->CCER = (TIM_CCER_CC1E | /*TIM_CCER_CC1P*|*/
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <timer_init+0x74>)
 800064a:	2255      	movs	r2, #85	; 0x55
 800064c:	621a      	str	r2, [r3, #32]
	TIM_CCER_CC1NE | /*TIM_CCER_CC1NP*|*/
	TIM_CCER_CC2E | /*TIM_CCER_CC2P*|*/
	TIM_CCER_CC2NE /*|*TIM_CCER_CC2NP*/);

	TIM1->BDTR = (TIM_BDTR_MOE | ((4 << 5) | 10));
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <timer_init+0x74>)
 8000650:	f248 028a 	movw	r2, #32906	; 0x808a
 8000654:	645a      	str	r2, [r3, #68]	; 0x44
	TIM1->CR1|=TIM_CR1_CEN;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <timer_init+0x74>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a05      	ldr	r2, [pc, #20]	; (8000670 <timer_init+0x74>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6013      	str	r3, [r2, #0]

}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40021000 	.word	0x40021000
 8000670:	40012c00 	.word	0x40012c00

08000674 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000676:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000678:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800067c:	480c      	ldr	r0, [pc, #48]	; (80006b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800067e:	490d      	ldr	r1, [pc, #52]	; (80006b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000680:	4a0d      	ldr	r2, [pc, #52]	; (80006b8 <LoopForever+0xe>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000684:	e002      	b.n	800068c <LoopCopyDataInit>

08000686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068a:	3304      	adds	r3, #4

0800068c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800068c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000690:	d3f9      	bcc.n	8000686 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000692:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000694:	4c0a      	ldr	r4, [pc, #40]	; (80006c0 <LoopForever+0x16>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000698:	e001      	b.n	800069e <LoopFillZerobss>

0800069a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800069c:	3204      	adds	r2, #4

0800069e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a0:	d3fb      	bcc.n	800069a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006a2:	f000 f811 	bl	80006c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006a6:	f7ff fee7 	bl	8000478 <main>

080006aa <LoopForever>:

LoopForever:
  b LoopForever
 80006aa:	e7fe      	b.n	80006aa <LoopForever>
  ldr   r0, =_estack
 80006ac:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80006b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80006b8:	08000730 	.word	0x08000730
  ldr r2, =_sbss
 80006bc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80006c0:	20000020 	.word	0x20000020

080006c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c4:	e7fe      	b.n	80006c4 <ADC1_2_IRQHandler>
	...

080006c8 <__libc_init_array>:
 80006c8:	b570      	push	{r4, r5, r6, lr}
 80006ca:	2600      	movs	r6, #0
 80006cc:	4d0c      	ldr	r5, [pc, #48]	; (8000700 <__libc_init_array+0x38>)
 80006ce:	4c0d      	ldr	r4, [pc, #52]	; (8000704 <__libc_init_array+0x3c>)
 80006d0:	1b64      	subs	r4, r4, r5
 80006d2:	10a4      	asrs	r4, r4, #2
 80006d4:	42a6      	cmp	r6, r4
 80006d6:	d109      	bne.n	80006ec <__libc_init_array+0x24>
 80006d8:	f000 f81a 	bl	8000710 <_init>
 80006dc:	2600      	movs	r6, #0
 80006de:	4d0a      	ldr	r5, [pc, #40]	; (8000708 <__libc_init_array+0x40>)
 80006e0:	4c0a      	ldr	r4, [pc, #40]	; (800070c <__libc_init_array+0x44>)
 80006e2:	1b64      	subs	r4, r4, r5
 80006e4:	10a4      	asrs	r4, r4, #2
 80006e6:	42a6      	cmp	r6, r4
 80006e8:	d105      	bne.n	80006f6 <__libc_init_array+0x2e>
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80006f0:	4798      	blx	r3
 80006f2:	3601      	adds	r6, #1
 80006f4:	e7ee      	b.n	80006d4 <__libc_init_array+0xc>
 80006f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006fa:	4798      	blx	r3
 80006fc:	3601      	adds	r6, #1
 80006fe:	e7f2      	b.n	80006e6 <__libc_init_array+0x1e>
 8000700:	08000728 	.word	0x08000728
 8000704:	08000728 	.word	0x08000728
 8000708:	08000728 	.word	0x08000728
 800070c:	0800072c 	.word	0x0800072c

08000710 <_init>:
 8000710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000712:	bf00      	nop
 8000714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000716:	bc08      	pop	{r3}
 8000718:	469e      	mov	lr, r3
 800071a:	4770      	bx	lr

0800071c <_fini>:
 800071c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800071e:	bf00      	nop
 8000720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000722:	bc08      	pop	{r3}
 8000724:	469e      	mov	lr, r3
 8000726:	4770      	bx	lr
